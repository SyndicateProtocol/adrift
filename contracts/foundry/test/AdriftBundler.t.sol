// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";
import "../src/sequencing/AdriftBundler.sol";

contract MockSequencingChain is ISequencingChain {
    event ProcessTransaction(bytes data);

    function processTransactionsBulk(bytes[] calldata data) external {
        for (uint256 i = 0; i < data.length; i++) {
            emit ProcessTransaction(data[i]);
        }
    }

    function processTransaction(bytes calldata data) external {
        emit ProcessTransaction(data);
    }
}

contract AdriftBundlerTest is Test {
    AdriftBundler bundler;
    MockSequencingChain sequencingChain;

    address randomnessRole = makeAddr("randomnessRole");
    address sequencerRole = makeAddr("sequencerRole");

    function setUp() public {
        sequencingChain = new MockSequencingChain();
        bundler = new AdriftBundler(address(sequencingChain), randomnessRole, sequencerRole);
    }

    function testBundle() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884183ff085c001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit AdriftBundler.MempoolUpdated(1, data);
        bundler.processTransactionsBulk(txns);

        assertEq(bundler.mempool(0), data);
    }

    function testBundle_notCheckIn() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884fbbdfdfbc001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(data);
        bundler.processTransactionsBulk(txns);

        vm.expectRevert();
        bundler.mempool(0);
    }

    function testAddRandomness() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884183ff085c001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        vm.prank(sequencerRole);
        bundler.processTransactionsBulk(txns);

        assertEq(bundler.mempool(0), data);

        bytes memory randomnessTx = abi.encode("randomness");

        vm.prank(randomnessRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(randomnessTx);
        emit MockSequencingChain.ProcessTransaction(data);
        emit AdriftBundler.MempoolCleared();
        bundler.addRandomness(randomnessTx);
    }

    function testProcessTransactionUncompressedValueTransfer() public {
        bytes memory valueTransferTx =
            hex"02f87482f954688405f5e1008405f5e100825208949a0ae9b4267c423626855fa71b933a9c6fc00a23880de0b6b3a764000080c001a09789ceade979ea65e4cc568ff80a8120c8e3f1cd35af7d7edee2fcd8820adb8ea04c94a281e06aaa759bbb172f9697f1b1b35314c4dae32858f4f94322490f2bb9";

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(valueTransferTx);
        bundler.processTransaction(valueTransferTx);
    }

    function testProcessTransactionBulkValueTransfer() public {
        bytes memory valueTransferTx =
            hex"02f87482f954688405f5e1008405f5e100825208949a0ae9b4267c423626855fa71b933a9c6fc00a23880de0b6b3a764000080c001a09789ceade979ea65e4cc568ff80a8120c8e3f1cd35af7d7edee2fcd8820adb8ea04c94a281e06aaa759bbb172f9697f1b1b35314c4dae32858f4f94322490f2bb9";
        bytes[] memory txns = new bytes[](1);
        txns[0] = valueTransferTx;

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(valueTransferTx);
        bundler.processTransactionsBulk(txns);
    }

    function testProcessTransactionContractDeployment() public {
        bytes memory contractDeploymentTx =
            hex"02f90d4782f9546201840bebc201830d96368080b90cf0608060405234801561000f575f80fd5b50604051610cd0380380610cd083398181016040528101906100319190610238565b6100435f801b8261007b60201b60201c565b506100747fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd98261007b60201b60201c565b5050610263565b5f61008c838361017060201b60201c565b6101665760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506101036101d360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061016a565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610207826101de565b9050919050565b610217816101fd565b8114610221575f80fd5b50565b5f815190506102328161020e565b92915050565b5f6020828403121561024d5761024c6101da565b5b5f61025a84828501610224565b91505092915050565b610a60806102705f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c8063729e7cf611610064578063729e7cf61461015657806378acaefe1461017257806391d1485414610190578063a217fddf146101c0578063d547741f146101de5761009c565b806301ffc9a7146100a0578063248a9ca3146100d05780632f2ff15d1461010057806336568abe1461011c5780635ec01e4d14610138575b5f80fd5b6100ba60048036038101906100b59190610754565b6101fa565b6040516100c79190610799565b60405180910390f35b6100ea60048036038101906100e591906107e5565b610273565b6040516100f7919061081f565b60405180910390f35b61011a60048036038101906101159190610892565b61028f565b005b61013660048036038101906101319190610892565b6102b1565b005b61014061032c565b60405161014d91906108e8565b60405180910390f35b610170600480360381019061016b919061092b565b610332565b005b61017a6103a5565b604051610187919061081f565b60405180910390f35b6101aa60048036038101906101a59190610892565b6103c9565b6040516101b79190610799565b60405180910390f35b6101c861042c565b6040516101d5919061081f565b60405180910390f35b6101f860048036038101906101f39190610892565b610432565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061026c575061026b82610454565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61029882610273565b6102a1816104bd565b6102ab83836104d1565b50505050565b6102b96105ba565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461031d576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61032782826105c1565b505050565b60015481565b61035c7fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd9336103c9565b61039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610392906109d6565b60405180910390fd5b8060018190555050565b7fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd981565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b61043b82610273565b610444816104bd565b61044e83836105c1565b50505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6104ce816104c96105ba565b6106aa565b50565b5f6104dc83836103c9565b6105b05760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061054d6105ba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506105b4565b5f90505b92915050565b5f33905090565b5f6105cc83836103c9565b156106a0575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061063d6105ba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506106a4565b5f90505b92915050565b6106b482826103c9565b6106f75780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016106ee929190610a03565b60405180910390fd5b5050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610733816106ff565b811461073d575f80fd5b50565b5f8135905061074e8161072a565b92915050565b5f60208284031215610769576107686106fb565b5b5f61077684828501610740565b91505092915050565b5f8115159050919050565b6107938161077f565b82525050565b5f6020820190506107ac5f83018461078a565b92915050565b5f819050919050565b6107c4816107b2565b81146107ce575f80fd5b50565b5f813590506107df816107bb565b92915050565b5f602082840312156107fa576107f96106fb565b5b5f610807848285016107d1565b91505092915050565b610819816107b2565b82525050565b5f6020820190506108325f830184610810565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61086182610838565b9050919050565b61087181610857565b811461087b575f80fd5b50565b5f8135905061088c81610868565b92915050565b5f80604083850312156108a8576108a76106fb565b5b5f6108b5858286016107d1565b92505060206108c68582860161087e565b9150509250929050565b5f819050919050565b6108e2816108d0565b82525050565b5f6020820190506108fb5f8301846108d9565b92915050565b61090a816108d0565b8114610914575f80fd5b50565b5f8135905061092581610901565b92915050565b5f602082840312156109405761093f6106fb565b5b5f61094d84828501610917565b91505092915050565b5f82825260208201905092915050565b7f43616c6c6572206973206e6f74207468652072616e646f6d6e6573732061646d5f8201527f696e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6109c0602283610956565b91506109cb82610966565b604082019050919050565b5f6020820190508181035f8301526109ed816109b4565b9050919050565b6109fd81610857565b82525050565b5f604082019050610a165f8301856109f4565b610a236020830184610810565b939250505056fea2646970667358221220290c315476581380f91834eba479c1e1f4edf064d8458912189338f5224b067364736f6c634300081900330000000000000000000000009a37e57d177c5ff8817b55da36f2a2b3532cde3fc001a0734efadc8e93c9eb44a94b74d434b930cd0f91f7f275fb2ec3ab1b97713e6f2ba00de943c042ceb304c0b66002a1c427af93778b8816bd7604ecf1043f6011aa6e";

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(contractDeploymentTx);
        bundler.processTransaction(contractDeploymentTx);
    }

    function testProcessTransactionBulkContractDeployment() public {
        bytes memory contractDeploymentTx =
            hex"02f90d4782f9546201840bebc201830d96368080b90cf0608060405234801561000f575f80fd5b50604051610cd0380380610cd083398181016040528101906100319190610238565b6100435f801b8261007b60201b60201c565b506100747fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd98261007b60201b60201c565b5050610263565b5f61008c838361017060201b60201c565b6101665760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff0219169083151502179055506101036101d360201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a46001905061016a565b5f90505b92915050565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f33905090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610207826101de565b9050919050565b610217816101fd565b8114610221575f80fd5b50565b5f815190506102328161020e565b92915050565b5f6020828403121561024d5761024c6101da565b5b5f61025a84828501610224565b91505092915050565b610a60806102705f395ff3fe608060405234801561000f575f80fd5b506004361061009c575f3560e01c8063729e7cf611610064578063729e7cf61461015657806378acaefe1461017257806391d1485414610190578063a217fddf146101c0578063d547741f146101de5761009c565b806301ffc9a7146100a0578063248a9ca3146100d05780632f2ff15d1461010057806336568abe1461011c5780635ec01e4d14610138575b5f80fd5b6100ba60048036038101906100b59190610754565b6101fa565b6040516100c79190610799565b60405180910390f35b6100ea60048036038101906100e591906107e5565b610273565b6040516100f7919061081f565b60405180910390f35b61011a60048036038101906101159190610892565b61028f565b005b61013660048036038101906101319190610892565b6102b1565b005b61014061032c565b60405161014d91906108e8565b60405180910390f35b610170600480360381019061016b919061092b565b610332565b005b61017a6103a5565b604051610187919061081f565b60405180910390f35b6101aa60048036038101906101a59190610892565b6103c9565b6040516101b79190610799565b60405180910390f35b6101c861042c565b6040516101d5919061081f565b60405180910390f35b6101f860048036038101906101f39190610892565b610432565b005b5f7f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061026c575061026b82610454565b5b9050919050565b5f805f8381526020019081526020015f20600101549050919050565b61029882610273565b6102a1816104bd565b6102ab83836104d1565b50505050565b6102b96105ba565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461031d576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61032782826105c1565b505050565b60015481565b61035c7fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd9336103c9565b61039b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610392906109d6565b60405180910390fd5b8060018190555050565b7fa7900ef85cbbf9e26e9a89d09bdc86e6fb491e1fc5904c1420a245e4c21b0bd981565b5f805f8481526020019081526020015f205f015f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a900460ff16905092915050565b5f801b81565b61043b82610273565b610444816104bd565b61044e83836105c1565b50505050565b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6104ce816104c96105ba565b6106aa565b50565b5f6104dc83836103c9565b6105b05760015f808581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061054d6105ba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4600190506105b4565b5f90505b92915050565b5f33905090565b5f6105cc83836103c9565b156106a0575f805f8581526020019081526020015f205f015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a81548160ff02191690831515021790555061063d6105ba565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16847ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a4600190506106a4565b5f90505b92915050565b6106b482826103c9565b6106f75780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016106ee929190610a03565b60405180910390fd5b5050565b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610733816106ff565b811461073d575f80fd5b50565b5f8135905061074e8161072a565b92915050565b5f60208284031215610769576107686106fb565b5b5f61077684828501610740565b91505092915050565b5f8115159050919050565b6107938161077f565b82525050565b5f6020820190506107ac5f83018461078a565b92915050565b5f819050919050565b6107c4816107b2565b81146107ce575f80fd5b50565b5f813590506107df816107bb565b92915050565b5f602082840312156107fa576107f96106fb565b5b5f610807848285016107d1565b91505092915050565b610819816107b2565b82525050565b5f6020820190506108325f830184610810565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61086182610838565b9050919050565b61087181610857565b811461087b575f80fd5b50565b5f8135905061088c81610868565b92915050565b5f80604083850312156108a8576108a76106fb565b5b5f6108b5858286016107d1565b92505060206108c68582860161087e565b9150509250929050565b5f819050919050565b6108e2816108d0565b82525050565b5f6020820190506108fb5f8301846108d9565b92915050565b61090a816108d0565b8114610914575f80fd5b50565b5f8135905061092581610901565b92915050565b5f602082840312156109405761093f6106fb565b5b5f61094d84828501610917565b91505092915050565b5f82825260208201905092915050565b7f43616c6c6572206973206e6f74207468652072616e646f6d6e6573732061646d5f8201527f696e000000000000000000000000000000000000000000000000000000000000602082015250565b5f6109c0602283610956565b91506109cb82610966565b604082019050919050565b5f6020820190508181035f8301526109ed816109b4565b9050919050565b6109fd81610857565b82525050565b5f604082019050610a165f8301856109f4565b610a236020830184610810565b939250505056fea2646970667358221220290c315476581380f91834eba479c1e1f4edf064d8458912189338f5224b067364736f6c634300081900330000000000000000000000009a37e57d177c5ff8817b55da36f2a2b3532cde3fc001a0734efadc8e93c9eb44a94b74d434b930cd0f91f7f275fb2ec3ab1b97713e6f2ba00de943c042ceb304c0b66002a1c427af93778b8816bd7604ecf1043f6011aa6e";

        bytes[] memory txns = new bytes[](1);
        txns[0] = contractDeploymentTx;

        vm.prank(sequencerRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(contractDeploymentTx);
        bundler.processTransactionsBulk(txns);
    }

    function testAddRandomness_RevertIfNotRandomnessRole() public {
        bytes memory randomnessTx = abi.encode("malicious randomness");

        address attacker = makeAddr("attacker");
        vm.prank(attacker);
        vm.expectRevert();
        bundler.addRandomness(randomnessTx);
    }

    function testProcessTransactionUncompressed_RevertIfNotSequencerRole() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884183ff085c001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        address attacker = makeAddr("attacker");
        vm.prank(attacker);
        vm.expectRevert();
        bundler.processTransaction(data);
    }

    function testProcessTransactionsBulk_RevertIfNotSequencerRole() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884183ff085c001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        address attacker = makeAddr("attacker");
        vm.prank(attacker);
        vm.expectRevert();
        bundler.processTransactionsBulk(txns);
    }

    function testAddRandomness_NoTxns() public {
        bytes memory randomnessTx = abi.encode("randomness");

        vm.prank(randomnessRole);
        vm.expectEmit(true, true, true, true);
        emit MockSequencingChain.ProcessTransaction(randomnessTx);
        bundler.addRandomness(randomnessTx);
    }

    function testGetMempoolLength() public {
        bytes memory data =
            hex"02f8700180843b9aca008504a817c800809412345678901234567890123456789012345678808301b19884183ff085c001a0ca05628286f3b9eaf249d485b9fd7d1fc905a234ac5ef82ace81a0e8862040c0a0303e95b753693841321d063d4331ace05f3ab0f062b0ed5c89578987d45cbcb6";
        bytes[] memory txns = new bytes[](1);
        txns[0] = data;

        vm.prank(sequencerRole);
        bundler.processTransactionsBulk(txns);

        assertEq(bundler.getMempoolLength(), 1);

        vm.prank(sequencerRole);
        bundler.processTransactionsBulk(txns);

        assertEq(bundler.getMempoolLength(), 2);

        vm.prank(randomnessRole);
        bundler.addRandomness(abi.encode("randomness"));

        assertEq(bundler.getMempoolLength(), 0);
    }
}
